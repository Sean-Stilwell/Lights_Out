{"version":3,"sources":["assets/LightOff.png","assets/LightOn.png","assets/LightInactive.png","components/Cell.js","components/Constants.js","scripts/board_coding.js","components/ShareLoadModal.js","components/WinnerModal.js","components/HelpModal.js","components/index.js","components/Header.js","components/Footer.js","App.js","index.js"],"names":["module","exports","Cell","props","this","value","TouchableOpacity","onPress","_handlePress","bind","Image","source","require","style","styles","image","index","View","container","_renderCell","Component","StyleSheet","create","flex","justifyContent","alignItems","width","height","margin","encode","pos1","pos2","decode","val","codeIsValid","encoded","BOARD_HEIGHT","length","i","parseInt","isNaN","ShareLoadModal","state","text","_copy","_validateCode","Clipboard","setString","loader","alert","Modal","animationType","transparent","visible","onRequestClose","console","log","centeredView","modalView","Text","modalText","modalContent","flexDirection","TextInput","textInput","label","multiline","onChangeText","setState","keyboardType","maxLength","button","buttonText","editable","buttonLarge","backgroundColor","padding","paddingLeft","paddingRight","color","fontWeight","textAlign","fontSize","paddingTop","borderColor","borderWidth","WinnerModal","moves","onPressRetry","icon","faUndo","size","onPressNewGame","faShareFromSquare","marginTop","Linking","openURL","Game","startingBoard","board","youWon","help","share","_clickTile","_loadGame","_randomize","_hasWon","Math","random","encodedBoard","encodeBoard","decoded","arr","push","decodeBoard","rows","row","_renderRow","rowIndex","cells","_renderRows","_restart","button_icon","faCircleQuestion","button_text","Header","paddingBottom","Footer","link","registerRootComponent"],"mappings":"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","file":"static/js/app.60707dd1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LightOff.faa22160.png\";","module.exports = __webpack_public_path__ + \"static/media/LightOn.5e01bec4.png\";","module.exports = __webpack_public_path__ + \"static/media/LightInactive.e799a455.png\";","import React, { Component } from 'react';\r\nimport { StyleSheet, View, TouchableOpacity, Image } from 'react-native';\r\nimport { CELL_OFF, CELL_ON, CELL_INACTIVE } from './Constants';\r\n\r\nexport default class Cell extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n\r\n    _renderCell(){\r\n        switch(this.props.value){\r\n            case CELL_OFF:\r\n                return <TouchableOpacity onPress={this._handlePress.bind(this)}>\r\n                    <Image \r\n                        source={require('../assets/LightOff.png')}\r\n                        style={styles.image}\r\n                    />\r\n                </TouchableOpacity>\r\n            case CELL_ON:\r\n                return <TouchableOpacity onPress={this._handlePress.bind(this)}>\r\n                    <Image\r\n                        source={require('../assets/LightOn.png')} \r\n                        style={styles.image}\r\n                    />\r\n                </TouchableOpacity>\r\n            case CELL_INACTIVE:\r\n                return <Image\r\n                        source={require('../assets/LightInactive.png')} \r\n                        style={styles.image}\r\n                    />\r\n        }\r\n    }\r\n\r\n\r\n    _handlePress(){ \r\n        this.props.onPress(this.props.index);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <View style={styles.container}>\r\n                {this._renderCell()}\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    image: {\r\n        width: 75,\r\n        height: 75,\r\n        margin: 2,\r\n    }\r\n});","export const CELL_OFF = 0;\r\nexport const CELL_ON = 1;\r\nexport const CELL_INACTIVE = 2;\r\nexport const BOARD_HEIGHT = 5;\r\nexport const BOARD_WIDTH = 4;","import { CELL_INACTIVE, CELL_ON, CELL_OFF, BOARD_HEIGHT, BOARD_WIDTH } from \"../components/Constants\";\r\n\r\n/**\r\n * Converts a board array to an encoded string that can be used to save the board state.\r\n * These strings can be more easily shared with other users to share games.\r\n */\r\nexport function encodeBoard(board){\r\n    let encoded = \"\";\r\n    let i = 0;\r\n    while (i < board.length - 1){\r\n        encoded += encode(board[i], board[i + 1]);\r\n        i += 2;\r\n    }\r\n    return encoded;\r\n}\r\n\r\n\r\n/**\r\n * Helper function to encode the board. Takes two cells and encodes them into a single number.\r\n * This reduces the size of the encoded string by a factor of 2.\r\n * @param {int} pos1 The first cell\r\n * @param {int} pos2 The second cell\r\n * @returns The encoded value\r\n */\r\nfunction encode(pos1, pos2){\r\n    switch (pos1){\r\n        case CELL_OFF:\r\n            switch (pos2){\r\n                case CELL_OFF:\r\n                    return 0;\r\n                case CELL_ON:\r\n                    return 1;\r\n                case CELL_INACTIVE:\r\n                    return 2;\r\n            }\r\n        case CELL_ON:\r\n            switch (pos2){\r\n                case CELL_OFF:\r\n                    return 3;\r\n                case CELL_ON:\r\n                    return 4;\r\n                case CELL_INACTIVE:\r\n                    return 5;\r\n            }\r\n        case CELL_INACTIVE:\r\n            switch (pos2){\r\n                case CELL_OFF:\r\n                    return 6;\r\n                case CELL_ON:\r\n                    return 7;\r\n                case CELL_INACTIVE:\r\n                    return 8;\r\n            }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Converts an encoded string back into the board array by reversing the encoding process.\r\n * @param {*} encoded The encoded string\r\n * @returns The board array\r\n */\r\nexport function decodeBoard(encoded){\r\n    let decoded = [];\r\n    for (let i = 0; i < encoded.length; i += 1){\r\n        let arr = decode(parseInt(encoded[i]));\r\n        decoded.push(arr[0]);\r\n        decoded.push(arr[1]);\r\n    }\r\n    return decoded;\r\n}\r\n\r\n\r\n/**\r\n * Helper function to decode the board. Takes a single number and decodes it into two cells.\r\n * @param {int} val The encoded value\r\n * @returns An array containing the two cells\r\n */\r\nfunction decode(val){\r\n    switch (val){\r\n        case 0:\r\n            return [CELL_OFF, CELL_OFF];\r\n        case 1:\r\n            return [CELL_OFF, CELL_ON];\r\n        case 2:\r\n            return [CELL_OFF, CELL_INACTIVE];\r\n        case 3:\r\n            return [CELL_ON, CELL_OFF];\r\n        case 4:\r\n            return [CELL_ON, CELL_ON];\r\n        case 5:\r\n            return [CELL_ON, CELL_INACTIVE];\r\n        case 6:\r\n            return [CELL_INACTIVE, CELL_OFF];\r\n        case 7:\r\n            return [CELL_INACTIVE, CELL_ON];\r\n        case 8:\r\n            return [CELL_INACTIVE, CELL_INACTIVE];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Determines if a given code is a valid code.\r\n * @param {int} encoded The code to check\r\n * @returns Whether the code is valid\r\n */\r\n export function codeIsValid(encoded){\r\n    if (encoded.length != (BOARD_HEIGHT * BOARD_WIDTH) / 2){\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < encoded.length; i += 1){\r\n        let value = parseInt(encoded[i]);\r\n        if (isNaN(value)){\r\n            return false;\r\n        }\r\n        if (value > 8 || value < 0){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}","import React, { Component } from \"react\";\r\nimport { Modal, StyleSheet, Text, TouchableOpacity, View, TextInput } from \"react-native\";\r\nimport Clipboard from \"@react-native-clipboard/clipboard\";\r\n\r\nimport { codeIsValid } from \"../scripts/board_coding\";\r\n\r\nexport default class ShareLoadModal extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this._copy = this._copy.bind(this);\r\n        this._validateCode = this._validateCode.bind(this);\r\n    }\r\n\r\n    _copy(){\r\n        Clipboard.setString(this.props.encoded);\r\n    }\r\n\r\n    _validateCode(){\r\n        if(codeIsValid(this.state.text)){\r\n            this.props.loader(this.state.text)\r\n        }\r\n        else {\r\n            alert(\"The code you entered is invalid. Please try again.\");\r\n        }\r\n    }\r\n    \r\n    state = {\r\n        text: '4444444444',\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Modal\r\n                animationType=\"fade\"\r\n                transparent={true}\r\n                visible={this.props.visible}\r\n                onRequestClose={() => {\r\n                    console.log(\"Modal has been closed.\");\r\n                }}>\r\n                <View style={styles.centeredView}>\r\n                    <View style={styles.modalView}>\r\n                        <Text style={styles.modalText}>Load a Game</Text>\r\n                        <Text style={styles.modalContent}>If you have a code, enter it to load a game: </Text>\r\n                        <View style={{flexDirection: 'row'}}>\r\n                            <TextInput \r\n                                style={styles.textInput}\r\n                                label=\"Code\"\r\n                                value={this.state.text}\r\n                                multiline={false}\r\n                                onChangeText={text => this.setState({ text: text })}\r\n                                keyboardType=\"numeric\"\r\n                                maxLength={10}\r\n                            />\r\n                            <TouchableOpacity style={styles.button} onPress={() => this._validateCode()}>\r\n                                <Text style={styles.buttonText}>Load</Text>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                        \r\n                        <Text style={styles.modalText}>Share Your Game</Text>\r\n                        <Text style={styles.modalContent}>To share your current game, copy this code: </Text>\r\n                        <View style={{flexDirection: 'row'}}>\r\n                            <TextInput \r\n                                style={styles.textInput}\r\n                                label=\"Code\"\r\n                                value={this.props.encoded}\r\n                                multiline={false}\r\n                                editable={false}\r\n                                keyboardType=\"numeric\"\r\n                                maxLength={10}\r\n                            />\r\n                            <TouchableOpacity style={styles.button} onPress={this._copy}>\r\n                                <Text style={styles.buttonText}>Copy</Text>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                        <TouchableOpacity style={styles.buttonLarge} onPress={this.props.onPress}>\r\n                            <Text style={styles.buttonText}>Close</Text>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    centeredView: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: 'rgba(0,0,0,0.5)',\r\n        padding: 20,\r\n    },\r\n    modalView: {\r\n        padding: 20,\r\n        paddingLeft: 40,\r\n        paddingRight: 40,\r\n        margin: 20,\r\n        backgroundColor: \"#1F1F1F\",\r\n        alignItems: \"center\"\r\n    },\r\n    button: {\r\n        margin: 20,\r\n        padding: 10,\r\n        height: 40,\r\n        backgroundColor: \"#ffA812\",\r\n    },\r\n    buttonLarge: {\r\n        margin: 20,\r\n        padding: 10,\r\n        height: 40,\r\n        width: 120,\r\n        backgroundColor: \"#ffA812\",\r\n    },\r\n    buttonText: {\r\n        color: \"black\",\r\n        fontWeight: \"bold\",\r\n        textAlign: \"center\"\r\n    },\r\n    modalText: {\r\n        color: \"white\",\r\n        fontWeight: \"bold\",\r\n        textAlign: \"center\",\r\n        fontSize: 30,\r\n        paddingTop: 15\r\n    },\r\n    modalContent: {\r\n        color: \"white\",\r\n        textAlign: \"center\",\r\n        fontSize: 20\r\n    },\r\n    textInput: {\r\n        margin: 20,\r\n        height: 40,\r\n        width: 200,\r\n        borderColor: 'gray',\r\n        borderWidth: 1,\r\n        backgroundColor: '#1F1F1F',\r\n        color: 'white',\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n    }\r\n});","import React, { Component } from \"react\";\r\nimport { Modal, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\r\nimport Clipboard from \"@react-native-clipboard/clipboard\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome';\r\nimport { faUndo } from '@fortawesome/free-solid-svg-icons/faUndo';\r\nimport { faShareFromSquare } from '@fortawesome/free-solid-svg-icons/faShareFromSquare'\r\n\r\nexport default class WinnerModal extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this._copy = this._copy.bind(this);\r\n    }\r\n\r\n    _copy(){\r\n        let text = \"Lights Out!\\nMoves: \" + this.props.moves + \"\\nPuzzle: \" + this.props.encoded + '\\n\\nhttps://seanstilwell.ca/Lights_Out/';\r\n        Clipboard.setString(text);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                animationType=\"fade\"\r\n                transparent={true}\r\n                visible={this.props.visible}\r\n                onRequestClose={() => {\r\n                    console.log(\"Modal has been closed.\");\r\n                }}>\r\n                <View style={styles.centeredView}>\r\n                    <View style={styles.modalView}>\r\n                        <Text style={styles.modalText}>You won in {this.props.moves} moves!</Text>\r\n                        <View style={{flexDirection: 'row', justifyContent: 'center'}}>\r\n                            <TouchableOpacity style={styles.button} onPress={this.props.onPressRetry}>\r\n                                <View style={{flexDirection: 'row'}}>\r\n                                    <FontAwesomeIcon icon={faUndo} size={20} />\r\n                                    <Text style={styles.buttonText}> Retry</Text>\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                            <TouchableOpacity style={styles.button} onPress={this.props.onPressNewGame}>\r\n                                <Text style={styles.buttonText}>New Game</Text>\r\n                            </TouchableOpacity>\r\n                            \r\n                            <TouchableOpacity style={styles.button} onPress={this._copy}>\r\n                                <View style={{flexDirection: 'row'}}>\r\n                                    <FontAwesomeIcon icon={faShareFromSquare} size={20} />\r\n                                    <Text style={styles.buttonText}> Share</Text>\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    centeredView: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: 'rgba(0,0,0,0.5)',\r\n        padding: 20\r\n    },\r\n    modalView: {\r\n        padding: 20,\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        margin: 20,\r\n        backgroundColor: \"#1F1F1F\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    },\r\n    button: {\r\n        margin: 5,\r\n        marginTop: 10,\r\n        padding: 10,\r\n        height: 40,\r\n        backgroundColor: \"#ffA812\",\r\n    },\r\n    buttonText: {\r\n        color: \"black\",\r\n        fontWeight: \"bold\",\r\n        textAlign: \"center\",\r\n    },\r\n    modalText: {\r\n        color: \"white\",\r\n        fontWeight: \"bold\",\r\n        textAlign: \"center\",\r\n        fontSize: 30\r\n    }\r\n});","import React, { Component } from \"react\";\r\nimport { Modal, StyleSheet, Text, TouchableOpacity, View, Linking } from \"react-native\";\r\n\r\nexport default class WinnerModal extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                animationType=\"fade\"\r\n                transparent={true}\r\n                visible={this.props.visible}\r\n                onRequestClose={() => {\r\n                    console.log(\"Modal has been closed.\");\r\n                }}>\r\n                <View style={styles.centeredView}>\r\n                    <View style={styles.modalView}>\r\n                        <Text style={styles.modalText}>How to play</Text>\r\n                        <Text style={styles.modalContent}>Try to turn all the cells on the board \"Off\".</Text>\r\n                        <Text style={styles.modalContent}>Whenever you click a cell, the cells beside it will also swap between \"On\" and \"Off\".</Text>\r\n                        <Text style={styles.modalContent}>The game is over when all the cells are \"Off\".</Text>\r\n                        <View style={{flexDirection: 'row'}}>\r\n                            <TouchableOpacity style={styles.button} onPress={() => Linking.openURL('https://github.com/Sean-Stilwell/Lights_Out/issues')}>\r\n                                <Text style={styles.buttonText}>Report Issue</Text>\r\n                            </TouchableOpacity> \r\n                            <TouchableOpacity style={styles.button} onPress={this.props.onPress}>\r\n                                <Text style={styles.buttonText}>Close</Text>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    centeredView: {\r\n        flex: 1,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: 'rgba(0,0,0,0.5)',\r\n        padding: 20,\r\n    },\r\n    modalView: {\r\n        padding: 20,\r\n        paddingLeft: 40,\r\n        paddingRight: 40,\r\n        margin: 20,\r\n        backgroundColor: \"#1F1F1F\",\r\n        alignItems: \"center\"\r\n    },\r\n    button: {\r\n        margin: 20,\r\n        padding: 10,\r\n        height: 40,\r\n        backgroundColor: \"#ffA812\",\r\n    },\r\n    buttonText: {\r\n        color: \"black\",\r\n        fontWeight: \"bold\",\r\n        textAlign: \"center\"\r\n    },\r\n    modalText: {\r\n        color: \"white\",\r\n        fontWeight: \"bold\",\r\n        textAlign: \"center\",\r\n        fontSize: 30\r\n    },\r\n    modalContent: {\r\n        color: \"white\",\r\n        textAlign: \"center\",\r\n        fontSize: 20,\r\n        paddingTop: 15\r\n    }\r\n});","import React, { Component } from 'react';\r\nimport { StyleSheet, View, Text, TouchableOpacity, Linking } from 'react-native';\r\n\r\n// Font Awesome Imports\r\nimport { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome';\r\nimport { faCircleQuestion } from '@fortawesome/free-solid-svg-icons/faCircleQuestion';\r\nimport { faUndo } from '@fortawesome/free-solid-svg-icons/faUndo';\r\nimport { faShareFromSquare } from '@fortawesome/free-solid-svg-icons/faShareFromSquare'\r\n// import { faGithub } from '@fortawesome/free-brands-svg-icons/faGithub'\r\n\r\n// Local Imports\r\nimport Cell from './Cell';\r\nimport ShareLoadModal from './ShareLoadModal';\r\nimport WinnerModal from './WinnerModal';\r\nimport HelpModal from './HelpModal';\r\nimport { encodeBoard, decodeBoard, codeIsValid } from '../scripts/board_coding';\r\nimport { BOARD_HEIGHT, BOARD_WIDTH, CELL_INACTIVE, CELL_OFF, CELL_ON } from './Constants';\r\n\r\nexport default class Game extends Component {\r\n\r\n    state = { \r\n        startingBoard: [CELL_OFF, CELL_OFF, CELL_OFF, CELL_OFF, \r\n                CELL_OFF, CELL_OFF, CELL_OFF, CELL_OFF,\r\n                CELL_OFF, CELL_OFF, CELL_OFF, CELL_OFF,\r\n                CELL_OFF, CELL_OFF, CELL_OFF, CELL_OFF,\r\n                CELL_OFF, CELL_OFF, CELL_OFF, CELL_OFF],\r\n        board: [CELL_OFF, CELL_OFF, CELL_OFF, CELL_OFF, \r\n                CELL_OFF, CELL_OFF, CELL_OFF, CELL_OFF,\r\n                CELL_OFF, CELL_OFF, CELL_OFF, CELL_OFF,\r\n                CELL_OFF, CELL_OFF, CELL_OFF, CELL_OFF,\r\n                CELL_OFF, CELL_OFF, CELL_OFF, CELL_OFF],\r\n        encoded: \"0000000000\",\r\n        youWon: false,\r\n        moves: 0,\r\n        help: false,\r\n        share: false,\r\n    };\r\n\r\n\r\n    /**\r\n     * Used to initialize the state of the game.\r\n     * @param {*} props \r\n     */\r\n    constructor(props){\r\n        super(props);\r\n        this._clickTile = this._clickTile.bind(this);\r\n        this._loadGame = this._loadGame.bind(this);\r\n    }\r\n\r\n\r\n    /**\r\n     * Randomize the board immediately when the page loads.\r\n     */\r\n    componentDidMount(){\r\n        this._randomize();\r\n    }\r\n\r\n\r\n    /**\r\n     * Code that runs when a tile is pressed. This function is passed to the\r\n     * Cell component as a prop. It is called by the Cell component when the\r\n     * user taps a cell, passing the index of the cell that was tapped. We use\r\n     * this index to update the state of the game.\r\n     * @param {int} index The index of the cell that was clicked\r\n     */\r\n    _clickTile(index){\r\n        const board = this.state.board;\r\n\r\n        // If the cell is inactive, do nothing\r\n        if (board[index] === CELL_INACTIVE) {\r\n            return\r\n        }\r\n\r\n        // Toggle the value of the cell\r\n        board[index] = board[index] === CELL_OFF ? CELL_ON : CELL_OFF;\r\n\r\n        // Toggle the cell above the clicked cell\r\n        if (index >= BOARD_WIDTH) {\r\n            switch (board[index - BOARD_WIDTH]) {\r\n                case CELL_OFF:\r\n                    board[index - BOARD_WIDTH] = CELL_ON;\r\n                    break;\r\n                case CELL_ON:\r\n                    board[index - BOARD_WIDTH] = CELL_OFF;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Toggle the cell below the clicked cell\r\n        if (index <= BOARD_HEIGHT * BOARD_WIDTH - BOARD_WIDTH - 1) {\r\n            switch (board[index + BOARD_WIDTH]) {\r\n                case CELL_OFF:\r\n                    board[index + BOARD_WIDTH] = CELL_ON;\r\n                    break;\r\n                case CELL_ON:\r\n                    board[index + BOARD_WIDTH] = CELL_OFF;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Toggle the cell to the left of the clicked cell\r\n        if (index % 4 !== 0) {\r\n            switch (board[index - 1]) {\r\n                case CELL_OFF:\r\n                    board[index - 1] = CELL_ON;\r\n                    break;\r\n                case CELL_ON:\r\n                    board[index - 1] = CELL_OFF;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Toggle the cell to the right of the clicked cell\r\n        if (index % 4 !== 3) {\r\n            switch (board[index + 1]) {\r\n                case CELL_OFF:\r\n                    board[index + 1] = CELL_ON;\r\n                    break;\r\n                case CELL_ON:\r\n                    board[index + 1] = CELL_OFF;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            board: board,\r\n            moves: this.state.moves + 1,\r\n            youWon: this._hasWon(),\r\n            help: false,\r\n            share: false\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Randomizes the state of the game. Begins by setting some cells to inactive.\r\n     * If not inactive, a cell starts off.\r\n     * \r\n     * After the active cells are set, the game is randomized by randomly clicking\r\n     * cells. This ensures there is always a winning path, as those cells can simply\r\n     * be unclicked to make the game win.\r\n     */\r\n    _randomize(){\r\n        let board = this.state.board;\r\n\r\n        // Set some cells to inactive\r\n        for (let i = 0; i < board.length; i++) {\r\n            let odds = 0.6;\r\n            if (i % 4 === 0 || i % 4 === 3 || i < BOARD_WIDTH || i > BOARD_HEIGHT * BOARD_WIDTH - BOARD_WIDTH - 1) {\r\n                odds += 0.6;\r\n            }\r\n            board[i] = Math.random() > 0.90 ? CELL_INACTIVE : CELL_OFF;\r\n        }\r\n\r\n        // Randomly click cells to randomize the game\r\n        for (let i = 0; i < board.length; i++) {\r\n            if (Math.random() > 0.4) {\r\n                this._clickTile(i);\r\n            }\r\n        }\r\n\r\n        // Update the starting and encoded boards to match the new game.\r\n        let startingBoard = [...board];\r\n        let encodedBoard = encodeBoard(startingBoard);\r\n\r\n        // Update the state of the game\r\n        this.setState({\r\n            board: board,\r\n            startingBoard: startingBoard,\r\n            encoded: encodedBoard,\r\n            moves: 0,\r\n            youWon: this._hasWon(),\r\n            help: false,\r\n            share: false\r\n        }, () => {});\r\n    }\r\n\r\n\r\n    /**\r\n     * Restores the game to the starting state. Allows the user to start over.\r\n     */\r\n    _restart(){\r\n        this.setState({\r\n            board: [...this.state.startingBoard],\r\n            moves: 0,\r\n            youWon: false,\r\n            help: false\r\n        });\r\n    }\r\n\r\n    _loadGame(encoded){\r\n        if (codeIsValid(encoded)) {\r\n            let board = decodeBoard(encoded);\r\n            this.setState({\r\n                board: [...board],\r\n                startingBoard: [...board],\r\n                encoded: encoded,\r\n                moves: 0,\r\n                youWon: false,\r\n                help: false,\r\n                share: false,\r\n            });\r\n        }\r\n        else {\r\n            alert(\"Invalid code\");\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns true if the game has been won.\r\n     * @returns {boolean} True if the game has been won, false otherwise.\r\n     */\r\n    _hasWon(){\r\n        for (let i = 0; i < this.state.board.length; i++) {\r\n            if (this.state.board[i] === CELL_ON) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n   \r\n    \r\n    /**\r\n     * Used to render the rows of the game board.\r\n     * @returns {array} An array of rows. Each row is an array of cells.\r\n     */\r\n    _renderRows() {\r\n        const rows = [];\r\n\r\n        for (let i = 0; i < BOARD_HEIGHT; ++i) {\r\n        rows.push(\r\n            <View key={i} style={styles.row}>\r\n                {this._renderRow(i)}\r\n            </View>,\r\n        );\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n\r\n    /**\r\n     * Used to render an individual row of the game board.\r\n     * @param {int} rowIndex The index of the row to render.\r\n     * @returns The row of cells at the given index.\r\n     */\r\n    _renderRow(rowIndex) {\r\n        const cells = [];\r\n        for (let i = 0; i < BOARD_WIDTH; ++i) {\r\n            cells.push(\r\n                <Cell key={rowIndex * 4 + i} index={rowIndex * 4 + i} value={this.state.board[rowIndex*4+i]} onPress={this._clickTile}/>,\r\n            );\r\n        }\r\n        return cells;\r\n    }\r\n\r\n\r\n    /**\r\n     * Used to render the game.\r\n     * @returns {<View>} The game board, winning screen, and the button to start a new game.\r\n     */\r\n    render() {\r\n        return (\r\n            <View style={styles.container}>\r\n                {this._renderRows()}\r\n                <WinnerModal visible={this.state.youWon} onPressNewGame={() => this._randomize()} onPressRetry={() => this._restart()} moves={this.state.moves} encoded={this.state.encoded}/>\r\n                <HelpModal visible={this.state.help} onPress={() => this.setState({help: false})}/>\r\n                <ShareLoadModal visible={this.state.share} onPress={() => this.setState({share: false})} encoded={this.state.encoded} loader={this._loadGame}/>\r\n                <View style={{flexDirection: 'row'}}>\r\n                    <TouchableOpacity style={styles.button_icon} onPress={() => this.setState({help: true})}>\r\n                        <FontAwesomeIcon icon={faCircleQuestion} size={20} />\r\n                    </TouchableOpacity>\r\n                    <TouchableOpacity style={styles.button_icon} onPress={() => this._restart()}>\r\n                        <FontAwesomeIcon icon={faUndo} size={20} />\r\n                    </TouchableOpacity>\r\n                    <TouchableOpacity style={styles.button} onPress={() => this._randomize()}>\r\n                        <Text style={styles.button_text}>New Game</Text>\r\n                    </TouchableOpacity>\r\n                    <TouchableOpacity style={styles.button_icon} onPress={() => this.setState({share: true})}>\r\n                        <FontAwesomeIcon icon={faShareFromSquare} size={20} />\r\n                    </TouchableOpacity>\r\n                    {/* <TouchableOpacity style={styles.button_icon} onPress={() => Linking.openURL('https://github.com/Sean-Stilwell/Lights_Out/')}>\r\n                        <FontAwesomeIcon icon={faGithub} size={20} />\r\n                    </TouchableOpacity> */}\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    row: {\r\n      flexDirection: 'row',\r\n      width: '100%',\r\n    },\r\n    button: {\r\n        margin: 10,\r\n        height: 40,\r\n        justifyContent: 'center',\r\n        textAlign: 'center',\r\n        alignItems: 'center',\r\n        width: 120,\r\n        backgroundColor: '#ffA812',\r\n    },\r\n    button_icon: {\r\n        margin: 10,\r\n        height: 40,\r\n        justifyContent: 'center',\r\n        textAlign: 'center',\r\n        alignItems: 'center',\r\n        width: 40,\r\n        backgroundColor: '#ffA812',\r\n    },\r\n    container: {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    button_text: {\r\n        fontSize: 15,\r\n        fontWeight: 'bold',\r\n    }\r\n  });","import React from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\n\r\nexport default function Header(){\r\n    return(\r\n        <View style={styles.container}>\r\n            <Text style={styles.text}>\r\n                Lights Out!\r\n            </Text>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        paddingBottom: 30,\r\n    },\r\n    text: {\r\n        fontSize: 60,\r\n        fontWeight: 'bold',\r\n        color: 'white',\r\n    }\r\n});","import React from 'react';\r\nimport { Linking, StyleSheet, Text, View } from 'react-native';\r\n\r\nexport default function Footer(){\r\n    return(\r\n        <View style={styles.container}>\r\n            <Text style={styles.text}>\r\n                Developed by <Text \r\n                    onPress={() => Linking.openURL('https://www.seanstilwell.ca')}\r\n                    style={styles.link}>Sean Stilwell\r\n                    </Text>\r\n            </Text>\r\n        </View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    text: {\r\n        fontSize: 20,\r\n        color: 'white',\r\n    },\r\n    link: {\r\n        color: '#ffA812',\r\n    }\r\n});","import React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport Game from './components';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Header />\n      <Game />\n      <Footer />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#1F1F1F',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}